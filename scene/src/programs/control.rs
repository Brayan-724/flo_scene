use crate::stream_id::*;
use crate::stream_source::*;
use crate::stream_target::*;
use crate::subprogram_id::*;

use once_cell::sync::{Lazy};

pub static SCENE_CONTROL_PROGRAM: Lazy<SubProgramId> = Lazy::new(|| SubProgramId::called("SCENE_CONTROL_PROGRAM"));

///
/// Messages that can be sent to the main scene control program
///
#[derive(Clone, Debug)]
pub enum SceneControl {
    ///
    /// Sets up a connection between the output of a source to a target. The StreamId identifies which output in the
    /// source is being connected.
    ///
    Connect(StreamSource, StreamTarget, StreamId),

    ///
    /// Marks the input stream for a subprogram as 'closed', which will usually cause it to shut down
    ///
    /// This allows a program to shut down gracefully
    ///
    Close(SubProgramId),

    ///
    /// Terminates the entire scene by stopping any calls to `run_scene()`
    ///
    StopScene,
}

///
/// Messages generated by the control program
///
#[derive(Clone, Debug)]
pub enum SceneUpdate {
    /// The output specified by the stream ID for the first subprogram has been connected to the input for the second
    Connected(SubProgramId, SubProgramId, StreamId),

    /// A subprogram has finished running
    Stopped(SubProgramId),
}
