"
    # The 'terminal' instance

    This adds the 'say' message to return a terminal object to send messages to
"
Export defaultInvertedClassInstance: [ :Self |
    | terminalOut sayObject |

    "This is created from the default terminal IO for the context, if there is one"
    terminalOut := Import item: 'terminalOut' from: 'Terminal'.

    "'say' is a stream that talks to the main terminal IO object"
    sayObject := Stream withReceiver: [ :conversation |
        | nextRemark |

        [
            "Add the puttableStream protocol, and otherwise just send on to the terminal"
            nextRemark 
                ifMatches: #cr          do: [ terminalOut say: '\n'. ]
                ifMatches: #space       do: [ terminalOut say: ' '. ]
                ifMatches: #tab         do: [ terminalOut say: '\t'. ]
                ifMatches: #nextPut:    do: [ :value | terminalOut say: (value printString). ]
                ifMatches: #nextPutAll: do: [ :value | value do: [ :chr | terminalOut say: (chr printString). ] ]
                ifMatches: #say:        do: [ :value | terminalOut say: (value printString) ]
                ifDoesNotMatch: [ terminalOut perform: nextRemark. ].
        ] while: [
            nextRemark := conversation next.
            ^(nextRemark isNil) not
        ]
    ].

    "Define an inverse message, 'say' that returns the sayObject stream"
    Self addInvertedMessage: #say  withAction: [ :sender :self | Inverted handled: sayObject. ].
    Self addInvertedMessage: #say: withAction: [ :val :sender :self | sayObject say: val ],
] as: 'terminal'.
